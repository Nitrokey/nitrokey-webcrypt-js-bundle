{
  "version": 3,
  "sources": ["../js/vendor/cbor.js", "../js/transport.ts", "../js/constants.ts", "../js/helpers.ts", "../js/ctaphid.ts", "../js/exceptions.ts", "../js/logs.ts", "../js/session.ts", "../js/types.ts", "../js/commands.ts", "../js/webcrypt.ts"],
  "sourcesContent": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n(function(global, undefined) { \"use strict\";\nvar POW_2_24 = 5.960464477539063e-8,\n    POW_2_32 = 4294967296,\n    POW_2_53 = 9007199254740992;\n\nfunction encode(value) {\n  var data = new ArrayBuffer(256);\n  var dataView = new DataView(data);\n  var lastLength;\n  var offset = 0;\n\n  function prepareWrite(length) {\n    var newByteLength = data.byteLength;\n    var requiredLength = offset + length;\n    while (newByteLength < requiredLength)\n      newByteLength <<= 1;\n    if (newByteLength !== data.byteLength) {\n      var oldDataView = dataView;\n      data = new ArrayBuffer(newByteLength);\n      dataView = new DataView(data);\n      var uint32count = (offset + 3) >> 2;\n      for (var i = 0; i < uint32count; ++i)\n        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n    }\n\n    lastLength = length;\n    return dataView;\n  }\n  function commitWrite() {\n    offset += lastLength;\n  }\n  function writeFloat64(value) {\n    commitWrite(prepareWrite(8).setFloat64(offset, value));\n  }\n  function writeUint8(value) {\n    commitWrite(prepareWrite(1).setUint8(offset, value));\n  }\n  function writeUint8Array(value) {\n    var dataView = prepareWrite(value.length);\n    for (var i = 0; i < value.length; ++i)\n      dataView.setUint8(offset + i, value[i]);\n    commitWrite();\n  }\n  function writeUint16(value) {\n    commitWrite(prepareWrite(2).setUint16(offset, value));\n  }\n  function writeUint32(value) {\n    commitWrite(prepareWrite(4).setUint32(offset, value));\n  }\n  function writeUint64(value) {\n    var low = value % POW_2_32;\n    var high = (value - low) / POW_2_32;\n    var dataView = prepareWrite(8);\n    dataView.setUint32(offset, high);\n    dataView.setUint32(offset + 4, low);\n    commitWrite();\n  }\n  function writeTypeAndLength(type, length) {\n    if (length < 24) {\n      writeUint8(type << 5 | length);\n    } else if (length < 0x100) {\n      writeUint8(type << 5 | 24);\n      writeUint8(length);\n    } else if (length < 0x10000) {\n      writeUint8(type << 5 | 25);\n      writeUint16(length);\n    } else if (length < 0x100000000) {\n      writeUint8(type << 5 | 26);\n      writeUint32(length);\n    } else {\n      writeUint8(type << 5 | 27);\n      writeUint64(length);\n    }\n  }\n\n  function encodeItem(value) {\n    var i;\n\n    if (value === false)\n      return writeUint8(0xf4);\n    if (value === true)\n      return writeUint8(0xf5);\n    if (value === null)\n      return writeUint8(0xf6);\n    if (value === undefined)\n      return writeUint8(0xf7);\n\n    switch (typeof value) {\n      case \"number\":\n        if (Math.floor(value) === value) {\n          if (0 <= value && value <= POW_2_53)\n            return writeTypeAndLength(0, value);\n          if (-POW_2_53 <= value && value < 0)\n            return writeTypeAndLength(1, -(value + 1));\n        }\n        writeUint8(0xfb);\n        return writeFloat64(value);\n\n      case \"string\":\n        var utf8data = [];\n        for (i = 0; i < value.length; ++i) {\n          var charCode = value.charCodeAt(i);\n          if (charCode < 0x80) {\n            utf8data.push(charCode);\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | charCode >> 6);\n            utf8data.push(0x80 | charCode & 0x3f);\n          } else if (charCode < 0xd800) {\n            utf8data.push(0xe0 | charCode >> 12);\n            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);\n            utf8data.push(0x80 | charCode & 0x3f);\n          } else {\n            charCode = (charCode & 0x3ff) << 10;\n            charCode |= value.charCodeAt(++i) & 0x3ff;\n            charCode += 0x10000;\n\n            utf8data.push(0xf0 | charCode >> 18);\n            utf8data.push(0x80 | (charCode >> 12)  & 0x3f);\n            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);\n            utf8data.push(0x80 | charCode & 0x3f);\n          }\n        }\n\n        writeTypeAndLength(3, utf8data.length);\n        return writeUint8Array(utf8data);\n\n      default:\n        var length;\n        if (Array.isArray(value)) {\n          length = value.length;\n          writeTypeAndLength(4, length);\n          for (i = 0; i < length; ++i)\n            encodeItem(value[i]);\n        } else if (value instanceof Uint8Array) {\n          writeTypeAndLength(2, value.length);\n          writeUint8Array(value);\n        } else {\n          var keys = Object.keys(value);\n          length = keys.length;\n          writeTypeAndLength(5, length);\n          for (i = 0; i < length; ++i) {\n            var key = keys[i];\n            encodeItem(key);\n            encodeItem(value[key]);\n          }\n        }\n    }\n  }\n\n  encodeItem(value);\n\n  if (\"slice\" in data)\n    return data.slice(0, offset);\n\n  var ret = new ArrayBuffer(offset);\n  var retView = new DataView(ret);\n  for (var i = 0; i < offset; ++i)\n    retView.setUint8(i, dataView.getUint8(i));\n  return ret;\n}\n\nfunction decode(data, tagger, simpleValue) {\n  var dataView = new DataView(data);\n  var offset = 0;\n\n  if (typeof tagger !== \"function\")\n    tagger = function(value) { return value; };\n  if (typeof simpleValue !== \"function\")\n    simpleValue = function() { return undefined; };\n\n  function commitRead(length, value) {\n    offset += length;\n    return value;\n  }\n  function readArrayBuffer(length) {\n    return commitRead(length, new Uint8Array(data, offset, length));\n  }\n  function readFloat16() {\n    var tempArrayBuffer = new ArrayBuffer(4);\n    var tempDataView = new DataView(tempArrayBuffer);\n    var value = readUint16();\n\n    var sign = value & 0x8000;\n    var exponent = value & 0x7c00;\n    var fraction = value & 0x03ff;\n\n    if (exponent === 0x7c00)\n      exponent = 0xff << 10;\n    else if (exponent !== 0)\n      exponent += (127 - 15) << 10;\n    else if (fraction !== 0)\n      return (sign ? -1 : 1) * fraction * POW_2_24;\n\n    tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\n    return tempDataView.getFloat32(0);\n  }\n  function readFloat32() {\n    return commitRead(4, dataView.getFloat32(offset));\n  }\n  function readFloat64() {\n    return commitRead(8, dataView.getFloat64(offset));\n  }\n  function readUint8() {\n    return commitRead(1, dataView.getUint8(offset));\n  }\n  function readUint16() {\n    return commitRead(2, dataView.getUint16(offset));\n  }\n  function readUint32() {\n    return commitRead(4, dataView.getUint32(offset));\n  }\n  function readUint64() {\n    return readUint32() * POW_2_32 + readUint32();\n  }\n  function readBreak() {\n    if (dataView.getUint8(offset) !== 0xff)\n      return false;\n    offset += 1;\n    return true;\n  }\n  function readLength(additionalInformation) {\n    if (additionalInformation < 24)\n      return additionalInformation;\n    if (additionalInformation === 24)\n      return readUint8();\n    if (additionalInformation === 25)\n      return readUint16();\n    if (additionalInformation === 26)\n      return readUint32();\n    if (additionalInformation === 27)\n      return readUint64();\n    if (additionalInformation === 31)\n      return -1;\n    throw \"Invalid length encoding\";\n  }\n  function readIndefiniteStringLength(majorType) {\n    var initialByte = readUint8();\n    if (initialByte === 0xff)\n      return -1;\n    var length = readLength(initialByte & 0x1f);\n    if (length < 0 || (initialByte >> 5) !== majorType)\n      throw \"Invalid indefinite length element\";\n    return length;\n  }\n\n  function appendUtf16Data(utf16data, length) {\n    for (var i = 0; i < length; ++i) {\n      var value = readUint8();\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = (value & 0x1f) <<  6\n                | (readUint8() & 0x3f);\n          length -= 1;\n        } else if (value < 0xf0) {\n          value = (value & 0x0f) << 12\n                | (readUint8() & 0x3f) << 6\n                | (readUint8() & 0x3f);\n          length -= 2;\n        } else {\n          value = (value & 0x0f) << 18\n                | (readUint8() & 0x3f) << 12\n                | (readUint8() & 0x3f) << 6\n                | (readUint8() & 0x3f);\n          length -= 3;\n        }\n      }\n\n      if (value < 0x10000) {\n        utf16data.push(value);\n      } else {\n        value -= 0x10000;\n        utf16data.push(0xd800 | (value >> 10));\n        utf16data.push(0xdc00 | (value & 0x3ff));\n      }\n    }\n  }\n\n  function decodeItem() {\n    var initialByte = readUint8();\n    var majorType = initialByte >> 5;\n    var additionalInformation = initialByte & 0x1f;\n    var i;\n    var length;\n\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16();\n        case 26:\n          return readFloat32();\n        case 27:\n          return readFloat64();\n      }\n    }\n\n    length = readLength(additionalInformation);\n    if (length < 0 && (majorType < 2 || 6 < majorType))\n      throw \"Invalid length\";\n\n    switch (majorType) {\n      case 0:\n        return length;\n      case 1:\n        return -1 - length;\n      case 2:\n        if (length < 0) {\n          var elements = [];\n          var fullArrayLength = 0;\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length;\n            elements.push(readArrayBuffer(length));\n          }\n          var fullArray = new Uint8Array(fullArrayLength);\n          var fullArrayOffset = 0;\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset);\n            fullArrayOffset += elements[i].length;\n          }\n          return fullArray;\n        }\n        return readArrayBuffer(length);\n      case 3:\n        var utf16data = [];\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0)\n            appendUtf16Data(utf16data, length);\n        } else\n          appendUtf16Data(utf16data, length);\n        return String.fromCharCode.apply(null, utf16data);\n      case 4:\n        var retArray;\n        if (length < 0) {\n          retArray = [];\n          while (!readBreak())\n            retArray.push(decodeItem());\n        } else {\n          retArray = new Array(length);\n          for (i = 0; i < length; ++i)\n            retArray[i] = decodeItem();\n        }\n        return retArray;\n      case 5:\n        var retObject = {};\n        for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\n          var key = decodeItem();\n          retObject[key] = decodeItem();\n        }\n        return retObject;\n      case 6:\n        return tagger(decodeItem(), length);\n      case 7:\n        switch (length) {\n          case 20:\n            return false;\n          case 21:\n            return true;\n          case 22:\n            return null;\n          case 23:\n            return undefined;\n          default:\n            return simpleValue(length);\n        }\n    }\n  }\n\n  var ret = decodeItem();\n  if (offset !== data.byteLength)\n    throw \"Remaining bytes\";\n  return ret;\n}\n\nvar obj = { encode: encode, decode: decode };\n\nif (typeof define === \"function\" && define.amd)\n  define(\"cbor/cbor\", obj);\nelse if (typeof module !== \"undefined\" && module.exports)\n  module.exports = obj;\nelse if (!global.CBOR)\n  global.CBOR = obj;\n\n})(this);\n", "// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\n\n/// <reference path=\"cbor.d.ts\" />\n\n// @ts-ignore\nimport * as CBOR from './vendor/cbor.js';\n\nimport {\n  CMD,\n  command_to_string,\n  WEBCRYPT_CMD,\n  WEBCRYPT_CONSTANTS,\n  WEBCRYPT_DEVICE_COMM,\n  errcode_to_string,\n  ERROR_CBOR_PARSING,\n  VERBOSE\n} from './constants';\nimport {concat, dict_binval, dict_hexval, flatten, int2arr, TEST, uint8ToUint16} from \"./helpers\"\nimport {ctaphid_via_webauthn} from \"./ctaphid\"\nimport {CommandExecutionError} from \"./exceptions\"\n// import {gather_platform_info} from \"./platform\";\n\nimport {Session} from \"./session\";\nimport {log_message, log_message_library} from \"./logs\";\nimport {StatusCallback} from \"./types\";\n\n\nfunction WEBCRYPT_get_protocol_header(op_type: WEBCRYPT_DEVICE_COMM, packet_num: number, number_of_packets: number,\n                                this_chunk_length?: number): Uint8Array {\n  let data = new Uint8Array(5).fill(60);\n\n  let op_type_str = '';\n  let max_chunk_size = 0;\n  if (op_type === WEBCRYPT_DEVICE_COMM.RECEIVE) {\n    max_chunk_size = WEBCRYPT_CONSTANTS.CHUNK_SIZE_RECEIVE;\n    op_type_str = 'RECEIVE';\n  } else if (op_type === WEBCRYPT_DEVICE_COMM.SEND) {\n    max_chunk_size = WEBCRYPT_CONSTANTS.CHUNK_SIZE_SEND;\n    op_type_str = 'SEND';\n  }\n\n  if (this_chunk_length === undefined || this_chunk_length === 0){\n    this_chunk_length = max_chunk_size;\n  }\n\n  data[0] = op_type & 0xff;\n  data[1] = packet_num;\n  data[2] = number_of_packets;\n  data[3] = max_chunk_size;\n  data[4] = this_chunk_length;\n\n  if (VERBOSE) log_message_library(`Packet header ${op_type_str}: ${packet_num+1}/${number_of_packets} [${packet_num * max_chunk_size},${(packet_num + 1) * max_chunk_size}), size: ${this_chunk_length}/${max_chunk_size}`);\n\n  return data;\n}\n\n\nfunction get_data_length_from_the_first_packet(data: Uint8Array): number {\n  return uint8ToUint16(data.slice(0,2)); // uint16_t BE\n}\n\nexport async function WEBCRYPT_receive(cmd: WEBCRYPT_CMD): Promise<Uint8Array> {\n  let received_data_arr = [];\n  const cmda = int2arr(cmd);\n\n  let dataLen = 0;\n  const number_of_packets = Math.ceil(WEBCRYPT_CONSTANTS.BUFFER_SIZE / WEBCRYPT_CONSTANTS.CHUNK_SIZE_RECEIVE);\n  for (let packet_no = 0; packet_no < number_of_packets; packet_no++) {\n    if (packet_no > 0 && dataLen < packet_no * WEBCRYPT_CONSTANTS.CHUNK_SIZE_RECEIVE) {\n      break;\n    }\n    const header_data = WEBCRYPT_get_protocol_header(WEBCRYPT_DEVICE_COMM.RECEIVE, packet_no, number_of_packets);\n    const data_to_send = concat(header_data, cmda);\n\n    try{\n      const response = await ctaphid_via_webauthn(CMD.WEBCRYPT, data_to_send, WEBCRYPT_CONSTANTS.TIMEOUT);\n      received_data_arr.push(response.signature);\n      if (VERBOSE) log_message_library(\"WC_receive RESPONSE\", response);\n      if (packet_no === 0 && response.data_len !== null) {\n        dataLen = get_data_length_from_the_first_packet(response.signature);\n      }\n    }\n    catch (error){\n      log_message_library(\"WC_receive ERROR\", error);\n      throw error;\n    }\n  }\n\n  let received_data = flatten(received_data_arr);\n  const commandID = received_data[2];\n  received_data = received_data.slice(3, dataLen);\n  console.log(\"Received data complete\",received_data, received_data_arr);\n\n  if (VERBOSE) log_message_library(`WEBCRYPT_receive received_data - len:${dataLen}, cmd:${commandID}, data:`, received_data);\n  return received_data;\n}\n\nexport async function WEBCRYPT_send(cmd: WEBCRYPT_CMD, data_to_send: Uint8Array) {\n  let written_packets_data = [];\n\n  let responses: any[] = [];\n  let error_flag: boolean = false;\n\n  const data_to_send_orig = data_to_send;\n  data_to_send = prepare_data_to_send(cmd, data_to_send);\n  if (VERBOSE) log_message_library(`WC_send cmd:${cmd}, data_to_send - orig and final`, data_to_send_orig, data_to_send);\n\n  const number_of_packets = Math.ceil(data_to_send.length / WEBCRYPT_CONSTANTS.CHUNK_SIZE_SEND);\n  for (let i = 0; i < number_of_packets; i++) {\n    const data_chunk = data_to_send.slice(i * WEBCRYPT_CONSTANTS.CHUNK_SIZE_SEND, (i + 1) * WEBCRYPT_CONSTANTS.CHUNK_SIZE_SEND);\n    TEST(data_chunk.length > 0, 'Data to send not null');\n\n    const header_data = WEBCRYPT_get_protocol_header(WEBCRYPT_DEVICE_COMM.SEND, i, number_of_packets, data_chunk.length);\n    let final_packet_data = add_packet_header_to_data(header_data, data_chunk);\n\n    written_packets_data.push(final_packet_data);\n    let code: number = 0;\n    try {\n      if (VERBOSE) log_message_library(`Sending packet ${i+1}/${number_of_packets} [${i * WEBCRYPT_CONSTANTS.CHUNK_SIZE_SEND},${(i + 1) * WEBCRYPT_CONSTANTS.CHUNK_SIZE_SEND}), size: ${data_chunk.length}/${WEBCRYPT_CONSTANTS.CHUNK_SIZE_SEND} (t:${final_packet_data.length})`);\n\n      const response = await ctaphid_via_webauthn(CMD.WEBCRYPT, final_packet_data, WEBCRYPT_CONSTANTS.TIMEOUT);\n      if (VERBOSE) log_message_library(\"WC_send RESPONSE\", response);\n      responses.push(response.data);\n      code = response.status_code;\n      if (response && code !== 0) {\n        log_message_library(\"WC_send ERROR\", response, code);\n        log_message_library(\"Error: \", errcode_to_string[code], code, 'hex: 0x' + code.toString(16));\n        error_flag = true;\n      }\n    }\n    catch (_e) {\n      log_message_library(\"WC_send ERROR other\", _e);\n      throw _e;\n    }\n    if (error_flag) {\n      log_message_library(\"WC_send breaking due to an error\");\n      log_message_library(\"WC_send responses status\", responses);\n      log_message_library(\"WC_send written_data status\", written_packets_data);\n      if (code === ERROR_CBOR_PARSING) {\n        log_message_library('CBOR failed with:', data_to_send_orig, 'transformed to: ', data_to_send);\n      }\n      throw new CommandExecutionError('Command failed', code);\n    }\n  }\n  return !error_flag;\n}\n\n\n\nfunction add_packet_header_to_data(header_data: Uint8Array, data_chunk: Uint8Array) {\n  let data = new Uint8Array(header_data.length + data_chunk.length).fill(63);\n  data.set(header_data, 0);\n  data.set(data_chunk, header_data.length);\n  const comm_offset = WEBCRYPT_CONSTANTS.COMM_OFFSET;\n  let final_data = new Uint8Array(comm_offset + data.length).fill(66);\n  final_data.set(data, comm_offset);\n  return final_data;\n}\n\nfunction prepare_data_to_send(cmd: WEBCRYPT_CMD, data_to_send: Uint8Array) {\n  /**\n   * Add 2 chars left padding, and cmd id\n   */\n  const _padding = new Uint8Array(2).fill(0xFF);\n  let cmdarr = int2arr(cmd);\n  cmdarr = concat(_padding, cmdarr);\n  data_to_send = concat(cmdarr, data_to_send);\n  return data_to_send;\n}\n\nexport function CBOR_encode_uint8t(data: any) {\n  return new Uint8Array(CBOR.encode(data));\n}\n\nexport function toString(arr: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < arr.length; ++i) {\n    str += String.fromCharCode(arr[i]);\n  }\n  return str;\n}\n\n\nexport function cbor_encode(data: any): Uint8Array {\n  const arrbuf = CBOR.encode(data);\n  return new Uint8Array(arrbuf);\n}\n\nfunction lib_delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport async function repeat_wrapper(func: Function, action: string, statusCallback: StatusCallback ){\n  //TODO add callback function handling for UI interaction\n  const total_attempts = 20;\n  for (let attempt = 0; attempt<total_attempts; attempt++){\n    try{\n      const attemptText = `Attempting to run command (${action}). Please press the touch button to confirm command.`;\n      await statusCallback(attemptText);\n      log_message(attemptText);\n      await func();\n      const successText = `Action (${action}) executed successfully.`;\n      await statusCallback(successText);\n      log_message(successText);\n      return;\n    }\n    catch (e) {\n      if (e instanceof CommandExecutionError && e.name === \"ERR_USER_NOT_PRESENT\" && attempt !== total_attempts-1){\n        const retryText = `Failed Attempt. Retrying... Please press the touch button to confirm command (${action}) (${attempt+1}/${total_attempts} attempts).`;\n        await statusCallback(retryText);\n        log_message(retryText);\n        await lib_delay(1000);\n        continue;\n      }\n      const failureText = `Action (${action}) failed. Error: ${e}`;\n      await statusCallback(failureText);\n      log_message(failureText);\n      throw e;\n    }\n  }\n}\n\n// https://blog.testdouble.com/posts/2019-05-14-locking-with-promises/\n// https://github.com/testdouble/lockify/blob/main/lib/lockify.js\n// \"license\": \"ISC\",\n// @ts-ignore\nconst lockify = f => {\n  let lock = Promise.resolve()\n\n  // @ts-ignore\n  return (...params) => {\n    const result = lock.then(() => f(...params))\n    lock = result.catch(() => {})\n\n    return result.then(value => value)\n  }\n}\n\n// export async function send_command(token: Session, cmd: WEBCRYPT_CMD, data: any = {}, statusCallback:StatusCallback): Promise<any> {\nconst send_command_locked = lockify(_send_command);\n\nexport async function send_command(token: Session, cmd: WEBCRYPT_CMD, data: any = {}, statusCallback:StatusCallback): Promise<any> {\n  log_message_library('Making lock');\n  const res =  await send_command_locked(token, cmd, data, statusCallback);\n  log_message_library('Releasing lock');\n  return res\n}\n\n/**\n * All binary data have to be encoded into hex string. Returns hex strings.\n * @param token Session token\n * @param cmd Command to call\n * @param data All binary data have to be encoded into hex string. Returns hex strings.\n * @param statusCallback The callback for UI message logging\n */\nasync function _send_command(token: Session, cmd: WEBCRYPT_CMD, data: any = {}, statusCallback:StatusCallback): Promise<any> {\n  data = dict_binval(data);\n  if (cmd === WEBCRYPT_CMD.LOGOUT){\n    token.clear();\n  } else if (cmd !== WEBCRYPT_CMD.LOGIN) {\n    data = token.authorize(data);\n  }\n  if (VERBOSE) log_message_library(`send_command, cmd:${cmd}, data:`, data);\n\n  console.log(\"final data sent\", data);\n  data = cbor_encode(data);\n  try {\n    await lib_delay(100);\n    await repeat_wrapper(() => WEBCRYPT_send(cmd, data), command_to_string[cmd], statusCallback);\n  } catch (error) {\n    throw error;\n  }\n  await lib_delay(100);\n  const response_cbor = await WEBCRYPT_receive(cmd);\n  if (response_cbor.length == 0) {\n    if (VERBOSE) log_message_library(`send_command finished, cmd:${cmd}`);\n    return {};\n  }\n  const result = CBOR.decode(response_cbor.buffer);\n  if (VERBOSE) log_message_library(`send_command finished, cmd:${cmd}, result:`, result);\n\n  return dict_hexval(result);\n}\n\n\n\n// gather_platform_info();\n", "// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\n\nexport const VERBOSE = false;\n\n\nexport enum CMD {\n    WEBCRYPT = 0x22,\n}\n\nexport enum WEBCRYPT_CMD {\n    STATUS = 0x00,\n    /// Test command - just return the received data\n    TEST_PING = 0x01,\n    /// Test command - clear user data without confirmation\n    TEST_CLEAR = 0x02,\n    /// Test command - issue reboot command to the host, if configured\n    TEST_REBOOT = 0x03,\n    /// Unlock access through FIDO U2F. Available for FIDO U2F compatibility.  FIDO2 should use native PIN handling.\n    LOGIN = 0x04,\n    /// Lock access through FIDO U2F. Available for FIDO U2F compatibility.\n    LOGOUT = 0x05,\n    /// Action should be equal in effect to calling FIDO2 reset\n    FACTORY_RESET = 0x06,\n    /// Return PIN attempts' counter value. @DEPRECATED by STATUS command.\n    PIN_ATTEMPTS = 0x07,\n    /// Set user options, like when to ask for the touch confirmation or PIN\n    SET_CONFIGURATION = 0x08,\n    GET_CONFIGURATION = 0x09,\n    SET_PIN = 0x0A,\n    CHANGE_PIN = 0x0B,\n\n    /// Initialize Webcrypt's secrets\n    INITIALIZE_SEED = 0x10,\n    /// Restore Webcrypt secrets from the provided data\n    RESTORE_FROM_SEED = 0x11,\n    /// Generate a key and return it to the callee as key handle\n    GENERATE_KEY = 0x12,\n    /// Sign data with key handle\n    SIGN = 0x13,\n    /// Decrypt data with key handle\n    DECRYPT = 0x14,\n    /// Generate a key from the provided data\n    GENERATE_KEY_FROM_DATA = 0x15,\n\n    /// Write a Resident Key from the provided data\n    GENERATE_RESIDENT_KEY = 0x16,\n    /// Read public key of the Resident Key\n    READ_RESIDENT_KEY_PUBLIC = 0x17,\n    /// Discover Resident Keys related to this RP\n    DISCOVER_RESIDENT_KEYS = 0x18,\n    /// Write RAW key as received from the RP\n    WRITE_RESIDENT_KEY = 0x19,\n\n    OPENPGP_DECRYPT = 0x20,\n    OPENPGP_SIGN = 0x21,\n    OPENPGP_INFO = 0x22,\n    OPENPGP_IMPORT= 0x23,\n    OPENPGP_GENERATE = 0x24,\n\n    /// Implementation detail: default value\n    NOT_SET = 0xFE,\n}\n\nexport enum WEBCRYPT_DEVICE_COMM  {\n    SEND = 0x01,\n    RECEIVE = 0x02,\n}\n\nexport const WEBCRYPT_CONSTANTS = {\n    CHUNK_SIZE_RECEIVE: 69,\n    CHUNK_SIZE_SEND: 41, // chrome: works with 41\n    COMM_OFFSET: 0,\n    BUFFER_SIZE: 1024,\n    TIMEOUT: 1000,\n};\n\ninterface NumberToStringMap {\n    [id: number]: string;\n}\n\n\nexport const command_codes: NumberToStringMap = {\n\t0x22: \"WEBCRYPT\",\n};\n\nexport const ctap_error_codes: NumberToStringMap = {\n    0x00: 'CTAP1_SUCCESS',\n    0x01: 'CTAP1_ERR_INVALID_COMMAND',\n    0x02: 'CTAP1_ERR_INVALID_PARAMETER',\n    0x03: 'CTAP1_ERR_INVALID_LENGTH',\n    0x04: 'CTAP1_ERR_INVALID_SEQ',\n    0x05: 'CTAP1_ERR_TIMEOUT',\n    0x06: 'CTAP1_ERR_CHANNEL_BUSY',\n    0x0A: 'CTAP1_ERR_LOCK_REQUIRED',\n    0x0B: 'CTAP1_ERR_INVALID_CHANNEL',\n\n    0x10: 'CTAP2_ERR_CBOR_PARSING',\n    0x11: 'CTAP2_ERR_CBOR_UNEXPECTED_TYPE',\n    0x12: 'CTAP2_ERR_INVALID_CBOR',\n    0x13: 'CTAP2_ERR_INVALID_CBOR_TYPE',\n    0x14: 'CTAP2_ERR_MISSING_PARAMETER',\n    0x15: 'CTAP2_ERR_LIMIT_EXCEEDED',\n    0x16: 'CTAP2_ERR_UNSUPPORTED_EXTENSION',\n    0x17: 'CTAP2_ERR_TOO_MANY_ELEMENTS',\n    0x18: 'CTAP2_ERR_EXTENSION_NOT_SUPPORTED',\n    0x19: 'CTAP2_ERR_CREDENTIAL_EXCLUDED',\n    0x20: 'CTAP2_ERR_CREDENTIAL_NOT_VALID',\n    0x21: 'CTAP2_ERR_PROCESSING',\n    0x22: 'CTAP2_ERR_INVALID_CREDENTIAL',\n    0x23: 'CTAP2_ERR_USER_ACTION_PENDING',\n    0x24: 'CTAP2_ERR_OPERATION_PENDING',\n    0x25: 'CTAP2_ERR_NO_OPERATIONS',\n    0x26: 'CTAP2_ERR_UNSUPPORTED_ALGORITHM',\n    0x27: 'CTAP2_ERR_OPERATION_DENIED',\n    0x28: 'CTAP2_ERR_KEY_STORE_FULL',\n    0x29: 'CTAP2_ERR_NOT_BUSY',\n    0x2A: 'CTAP2_ERR_NO_OPERATION_PENDING',\n    0x2B: 'CTAP2_ERR_UNSUPPORTED_OPTION',\n    0x2C: 'CTAP2_ERR_INVALID_OPTION',\n    0x2D: 'CTAP2_ERR_KEEPALIVE_CANCEL',\n    0x2E: 'CTAP2_ERR_NO_CREDENTIALS',\n    0x2F: 'CTAP2_ERR_USER_ACTION_TIMEOUT',\n    0x30: 'CTAP2_ERR_NOT_ALLOWED',\n    0x31: 'CTAP2_ERR_PIN_INVALID',\n    0x32: 'CTAP2_ERR_PIN_BLOCKED',\n    0x33: 'CTAP2_ERR_PIN_AUTH_INVALID',\n    0x34: 'CTAP2_ERR_PIN_AUTH_BLOCKED',\n    0x35: 'CTAP2_ERR_PIN_NOT_SET',\n    0x36: 'CTAP2_ERR_PIN_REQUIRED',\n    0x37: 'CTAP2_ERR_PIN_POLICY_VIOLATION',\n    0x38: 'CTAP2_ERR_PIN_TOKEN_EXPIRED',\n    0x39: 'CTAP2_ERR_REQUEST_TOO_LARGE',\n};\n\n\nexport const errcode_to_string: NumberToStringMap = {\n    0x00: \"ERR_SUCCESS\",\n    0xF0: \"ERR_REQ_AUTH\",\n    0xF1: \"ERR_INVALID_PIN\",\n    0xF2: \"ERR_NOT_ALLOWED\",\n    0xF3: \"ERR_BAD_FORMAT\",\n    0xF4: \"ERR_USER_NOT_PRESENT\",\n    0xF5: \"ERR_FAILED_LOADING_DATA\",\n    0xF6: \"ERR_INVALID_CHECKSUM\",\n    0xF7: \"ERR_ALREADY_IN_DATABASE\",\n    0xF8: \"ERR_NOT_FOUND\",\n    0xF9: \"ERR_ASSERT_FAILED\",\n    0xFA: \"ERR_INTERNAL_ERROR\",\n    0xFB: \"ERR_MEMORY_FULL\",\n    0xFC: \"ERR_NOT_IMPLEMENTED\",\n    0xFD: \"ERR_BAD_ORIGIN\",\n    0xFE: \"ERR_NOT_SET\",\n    0xFF: \"ERR_INVALID_COMMAND\",\n}\n\nexport const string_to_errcode = Object.assign(\n\t{},\n\t...Object.entries(errcode_to_string).map(\n\t\t([a, b]) => ({[b]: a})\n\t)\n);\n\n\nexport const command_to_string: NumberToStringMap = {\n    0x00: \"STATUS\",\n    0x01: \"TEST_PING\",\n    0x02: \"TEST_CLEAR\",\n    0x03: \"TEST_REBOOT\",\n    0x04: \"LOGIN\",\n    0x05: \"LOGOUT\",\n    0x06: \"FACTORY_RESET\",\n    0x07: \"PIN_ATTEMPTS\",\n    0x08: \"SET_CONFIGURATION\",\n    0x09: \"GET_CONFIGURATION\",\n    0x0A: \"SET_PIN\",\n    0x0B: \"CHANGE_PIN\",\n\n    0x10: \"INITIALIZE_SEED\",\n    0x11: \"RESTORE_FROM_SEED\",\n    0x12: \"GENERATE_KEY\",\n    0x13: \"SIGN\",\n    0x14: \"DECRYPT\",\n    0x15: \"GENERATE_KEY_FROM_DATA\",\n    0x16: \"GENERATE_RESIDENT_KEY\",\n    0x17: \"READ_RESIDENT_KEY_PUBLIC\",\n    0x18: \"DISCOVER_RESIDENT_KEYS\",\n    0x19: \"WRITE_RESIDENT_KEY\",\n\n    0x20: \"OPENPGP_DECRYPT\",\n    0x21: \"OPENPGP_SIGN\",\n    0x22: \"OPENPGP_INFO\",\n    0x23: \"OPENPGP_IMPORT\",\n    0x24: \"OPENPGP_INIT\",\n\n    0xFE: \"NOT_SET\",\n};\n\nexport const string_to_command = Object.assign(\n    {},\n    ...Object.entries(command_to_string).map(\n        ([a, b]) => ({[b]: a})\n    )\n);\n\n\nexport const ERROR_CBOR_PARSING = 0x10;\n\n\nexport const commands_parameters: Record<string, Record<string, string>> = {\n    \"STATUS\": {},\n    \"TEST_PING\": {},\n    \"TEST_CLEAR\": {},\n    \"TEST_REBOOT\": {},\n    \"LOGIN\": {\"PIN\": \"string\"},\n    \"LOGOUT\": {},\n    \"FACTORY_RESET\": {},\n    // \"PIN_ATTEMPTS\": {  },\n    \"SET_CONFIGURATION\": {\"CONFIRMATION\": \"number\"},\n    \"GET_CONFIGURATION\": {},\n    \"SET_PIN\": {\"PIN\": \"string\"},\n    \"CHANGE_PIN\": {\"PIN\": \"string\", \"NEWPIN\": \"string\"},\n\n    \"INITIALIZE_SEED\": {\"ENTROPY\": \"bytes\"},\n    \"RESTORE_FROM_SEED\": {\"MASTER\": \"bytes\", \"SALT\": \"bytes\"},\n    \"GENERATE_KEY\": {},\n    \"SIGN\": {\"HASH\": \"bytes\", \"KEYHANDLE\": \"bytes\"},\n    \"DECRYPT\": {\"DATA\": \"bytes\", \"KEYHANDLE\": \"bytes\", \"HMAC\": \"bytes\", \"ECCEKEY\": \"bytes\"},\n    \"GENERATE_KEY_FROM_DATA\": {\"HASH\": \"bytes\"},\n\n    \"GENERATE_RESIDENT_KEY\": {},\n    \"READ_RESIDENT_KEY_PUBLIC\": {\"KEYHANDLE\": \"bytes\"},\n    \"DISCOVER_RESIDENT_KEYS\": {},\n    \"WRITE_RESIDENT_KEY\": {\"RAW_KEY_DATA\": \"bytes\"},\n};\n", "// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\nimport {Dictionary, StatusCallback} from \"./types\";\n\nclass TestError extends Error {\n\n}\n\nexport function TEST(tested_condition: boolean, test_description: string, logfn: StatusCallback = async ()=>{} ): void{\n    if (tested_condition) {\n        if (test_description ){\n            const message = \"+++ PASS: \" + test_description;\n            console.log(message);\n            logfn(message);\n        }\n    }\n    else {\n        const message_fail = \"--- TEST FAIL: \" + test_description;\n        console.log(message_fail);\n        logfn(message_fail);\n        throw new TestError(message_fail);\n    }\n}\n\nexport function byteToHexString(uint8arr: Uint8Array): string {\n    if (!uint8arr) {\n        return '';\n    }\n    let hexStr = '';\n    for (let i = 0; i < uint8arr.length; i++) {\n        let hex = (uint8arr[i] & 0xff).toString(16);\n        hex = (hex.length === 1) ? '0' + hex : hex;\n        hexStr += hex;\n    }\n    return hexStr.toUpperCase();\n}\n\nexport function hexStringToByte(str: string): Uint8Array {\n    if (!str) {\n        return new Uint8Array();\n    }\n    const a = [];\n    for (let i = 0, len = str.length; i < len; i+=2) {\n        a.push(parseInt(str.substr(i,2),16));\n    }\n    return new Uint8Array(a);\n}\n\n\nexport function uint8ToUint16(uint_arr: Uint8Array, littleEndian = false) {\n    return (new DataView(uint_arr.buffer)).getUint16(0, littleEndian);\n}\n\nexport function flatten(u8_arr_arr: Array<Uint8Array>): Uint8Array{\n    let s= 0;\n    for (let i = 0; i < u8_arr_arr.length; i++) {\n        s+= u8_arr_arr[i].length;\n    }\n\n    let res = new Uint8Array(s);\n    let offset = 0;\n    for (let i = 0; i < u8_arr_arr.length; i++) {\n        res.set(u8_arr_arr[i], offset);\n        offset += u8_arr_arr[i].length;\n    }\n    return res;\n}\n\nexport function concat(a: Uint8Array, b: Uint8Array): Uint8Array {\n    let c = new Uint8Array(a.length + b.length);\n    c.set(a, 0); // FIXME handle empty/null arguments\n    c.set(b, a.length);\n    return c;\n}\n\nexport function int2arr(uint: number): Uint8Array {\n    let uint_arr = new Uint8Array(1);\n    uint_arr[0] = uint;\n    return uint_arr;\n}\n\nexport function values(dictionary: Dictionary) {\n    let i, arr = [];\n    for(i in dictionary) {\n        arr.push(dictionary[i]);\n    }\n    return arr;\n}\n\nexport function keys(dictionary:Dictionary): string[] {\n    let i, arr = [];\n    for(i in dictionary) {\n        arr.push(i);\n    }\n    return arr;\n}\n\nexport function items(dict: Dictionary){\n    let ret = [];\n    for(let v in dict){\n        ret.push(Object.freeze([v, dict[v]]));\n    }\n    return Object.freeze(ret);\n}\n\nexport function getBinaryStr(data: string): Uint8Array {\n    let uintArray = new Uint8Array(data.length).fill(67);\n    for (let i = 0; i < data.length; ++i) {\n        // uintArray[i] = data.charAt(i);\n        uintArray[i] = data.charCodeAt(i);\n    }\n    return uintArray;\n}\n\nexport function dict_binval(dictionary:Dictionary):Dictionary {\n    let res: Dictionary = {};\n    for(let i in dictionary) {\n        if (typeof dictionary[i] === \"object\"){\n            res[i] = dictionary[i];\n        } else if (i === \"PIN\" || i === \"NEWPIN\") {\n            res[i] = getBinaryStr(<string>dictionary[i]);\n        } else {\n            res[i] = hexStringToByte(<string>dictionary[i]);\n        }\n    }\n    // console.log(\"dict_binval\",dictionary, res);\n    return res;\n}\n\nexport function clone_object(obj:any) {\n    return JSON.parse(JSON.stringify(obj));\n}\n\nexport function dict_hexval(dictionary:Dictionary):Dictionary {\n    let res: Dictionary = {};\n    for(let i in dictionary) {\n        if (typeof dictionary[i] === \"object\"){ // Uint8Array\n            res[i] = byteToHexString(<Uint8Array>dictionary[i]);\n        } else {\n            res[i] = dictionary[i];\n        }\n    }\n    return res;\n}\n\nexport function dict_empty(dict: Dictionary): boolean {\n    return Object.keys(dict).length === 0\n}\n\nexport function delay(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport async function get_hash(o: string) {\n    // import {sha256} from \"js-sha256\";\n    // return sha256(o);\n    const buffer = await window.crypto.subtle.digest('SHA-256', new TextEncoder().encode(o));\n    return byteToHexString(new Uint8Array(buffer));\n}\n\nexport async function generate_key_ecc(): Promise<CryptoKeyPair> {\n    const algorithm = {\n        name: \"ECDH\",\n        namedCurve: \"P-256\",\n    };\n    return await window.crypto.subtle.generateKey(\n        algorithm,\n        true,\n        [\"deriveKey\"]\n    ) as CryptoKeyPair ;\n}\n\nexport async function agree_on_key(privateKey: CryptoKey, publicKey: CryptoKey) {\n    return window.crypto.subtle.deriveKey(\n        {\n            name: \"ECDH\",\n            public: publicKey\n        },\n        privateKey,\n        {\n            name: \"AES-CBC\",\n            length: 256\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n}\n\nexport async function encode_text(text:string) : Promise<Uint8Array> {\n    return new TextEncoder().encode(text);\n}\n\nexport async function encrypt_aes(key:CryptoKey, data:Uint8Array): Promise<ArrayBuffer> {\n    const encoded = data;\n    const iv = new Uint8Array(16).fill(0);\n    return window.crypto.subtle.encrypt(\n        {\n            name: \"AES-CBC\",\n            iv: iv,\n            length: 256,\n        },\n        key,\n        encoded,\n    );\n}\n\nexport async function calculate_hmac(key_in:CryptoKey, data:Uint8Array) {\n    const algorithm = { name: 'HMAC', hash: 'SHA-256' };\n    const encoder = new TextEncoder();\n\n    const keyraw = await export_key(key_in);\n\n    const key = await crypto.subtle.importKey(\n        'raw',\n        keyraw,\n        algorithm,\n        true,\n        ['sign', 'verify']\n    );\n\n    return await window.crypto.subtle.sign(\n        \"HMAC\",\n        key,\n        data\n    );\n}\n\nexport async function number_to_short(n:number): Promise<ArrayBuffer> {\n    const buffer = new ArrayBuffer(2);\n    const dataView = new DataView(buffer);\n    dataView.setInt16(0, n, true);\n    return dataView.buffer;\n}\n\nexport async function ecdsa_to_ecdh(pk:CryptoKey):Promise<CryptoKey> {\n    return await crypto.subtle.importKey('raw', await crypto.subtle.exportKey('raw', pk), {\n            name: \"ecdh\",\n            namedCurve: \"P-256\"\n        },\n        true,\n        []\n    );\n}\n\nexport async function import_key(data:Uint8Array):Promise<CryptoKey> {\n    const algorithm = {\n        name: \"ECDSA\",\n        // hash: {name: \"SHA-256\"},\n        namedCurve: \"P-256\",\n    };\n    return await crypto.subtle.importKey(\n        'raw',\n        data,\n        algorithm,\n        true,\n        // [\"deriveKey\"]\n        [\"verify\"]\n    );\n}\n\nexport async function export_key(key: CryptoKey): Promise<Uint8Array> {\n    const exported = await window.crypto.subtle.exportKey(\n        \"raw\",\n        key\n    );\n    return new Uint8Array(exported);\n}\n\nexport function buffer_to_uint8(buf: ArrayBuffer) {\n    return new Uint8Array(buf as ArrayBuffer);\n}\n\nexport function round_to_next(x:number, n:number): number\n{\n    return x + n - x % n;\n}\n\nexport function pkcs7_pad_16(arr:Uint8Array): Uint8Array {\n    const s = arr.length;\n    const s_pad = round_to_next(s, 16);\n\n    const arr_padded = new Uint8Array(s_pad).fill(s_pad-s);\n    arr_padded.set(arr);\n    return arr_padded;\n}\nexport function remove_pkcs7_pad_16(arr:Uint8Array): Uint8Array {\n    const pad_value = arr[arr.length-1];\n    if (pad_value>16){\n        return arr;\n    }\n    return arr.slice(0, arr.length-1-pad_value);\n}\n\nexport function equalBuffer (buf1:Uint8Array, buf2:Uint8Array)\n{\n    if (buf1.byteLength != buf2.byteLength) return false;\n    for (let i = 0 ; i != buf1.byteLength ; i++)\n    {\n        if (buf1[i] != buf2[i]) return false;\n    }\n    return true;\n}\n", "// Copyright 2019 SoloKeys Developers\n// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\n// Parts of the implementation taken from:\n// https://github.com/solokeys/solo-webupdate\n\nimport {CMD, command_codes, ctap_error_codes, VERBOSE} from \"./constants\";\n// import {webauthn_supported} from \"./platform\";\n\ninterface U2fResponse {\n    authenticatorData: any;\n    signature: any;\n}\n\ninterface Credential2 extends Credential {\n    response?: U2fResponse;\n}\n\n\n/**\n * Encode Webcrypt request into KEYHANDLE, sent over Webauthn. Data gets back in the SIGNATURE field.\n * @param cmd\n * @param data\n */\nfunction encode_ctaphid_request_as_keyhandle(cmd: number, data: Uint8Array) {\n    if (VERBOSE) console.log('ctaphid REQUEST CMD', cmd, '(', command_codes[cmd], ')', data);\n    data = data || new Uint8Array(16).fill(64);\n\n    const offset = 5;\n\n    if (offset + data.length > 255) {\n        throw new Error(\"Max size exceeded\");\n    }\n\n    const array = new Uint8Array(offset + data.length);\n\n    array[0] = cmd & 0xff;\n\n    // Set magic bytes, after which the command is recognized by the device as Webcrypt's\n    array[1] = 0x8C;  // 140\n    array[2] = 0x27;  //  39\n    array[3] = 0x90;  // 144\n    array[4] = 0xf6;  // 246\n\n    array.set(data, offset);\n\n    if (VERBOSE) console.log('ctaphid FORMATTED REQUEST:', array);\n    return array;\n}\n\n\nfunction decode_ctaphid_response_from_signature(response: U2fResponse) {\n    // https://fidoalliance.org/specs/fido-v2.0-rd-20170927/fido-client-to-authenticator-protocol-v2.0-rd-20170927.html#using-the-ctap2-authenticatorgetassertion-command-with-ctap1-u2f-authenticators<Paste>\n    //\n    // compared to `parse_device_response`, the data is encoded a little differently here\n    //\n    // attestation.response.authenticatorData\n    //\n    // first 32 bytes: SHA-256 hash of the rp.id\n    // 1 byte: zeroth bit = user presence set in U2F response (always 1)\n    // last 4 bytes: signature counter (32 bit big-endian)\n    //\n    // attestation.response.signature\n    // signature data (bytes 5-end of U2F response\n\n    const signature_count = (\n        new DataView(\n            response.authenticatorData.slice(33, 37)\n        )\n    ).getUint32(0, false); // get count as 32 bit BE integer\n\n    const signature = new Uint8Array(response.signature);\n    let data = null;\n\n    let error_code = null;\n    if (signature.length>0){\n        error_code = signature[0]; // CMD_WRITE only\n        if (error_code == 0) {\n            data = signature.slice(1, signature.length);\n        }\n    }\n\n    return {\n        count: signature_count,\n        // status: ctap_error_codes[error_code],\n        status: \"error_code\",\n        status_code: error_code,\n        data: data,\n        signature: signature,\n    };\n}\n\n\nexport async function ctaphid_via_webauthn(cmd: CMD, data: Uint8Array, timeout: number): Promise<any> {\n    // if a token does not support CTAP2, WebAuthn re-encodes as CTAP1/U2F:\n    // https://fidoalliance.org/specs/fido-v2.0-rd-20170927/fido-client-to-authenticator-protocol-v2.0-rd-20170927.html#interoperating-with-ctap1-u2f-authenticators\n    //\n    // problem: the popup to press button flashes up briefly :(\n\n    const keyhandle = encode_ctaphid_request_as_keyhandle(cmd, data);\n//   const challenge = window.crypto.getRandomValues(new Uint8Array(32));\n    const challenge = new Uint8Array(32).fill(69);\n\n\n    const request_options: PublicKeyCredentialRequestOptions = {\n        challenge: challenge,\n        allowCredentials: [{\n            id: keyhandle,\n            type: 'public-key',\n        }],\n        timeout: timeout,\n        userVerification: \"discouraged\",\n    }\n\n    // if (!webauthn_supported())\n    //     throw \"Webauthn is not supported\";\n\n    try {\n        const result = await navigator.credentials.get({\n            publicKey: request_options\n        });\n        const assertion: Credential2 | null = result;\n        if (VERBOSE) console.log(\"ctaphid GOT ASSERTION\", assertion);\n        if (!assertion) throw new Error(\"Empty assertion\");\n        if (!assertion.response) throw new Error(\"Empty assertion response\");\n\n        if (VERBOSE) console.log(\"ctaphid RESPONSE\", assertion.response);\n        const response = decode_ctaphid_response_from_signature(assertion.response!);\n        if (VERBOSE) console.log(\"ctaphid RESPONSE decoded:\", response);\n        return response;\n    } catch (error) {\n        console.log(`ctaphid ERROR CALLING: ${cmd}/${command_codes[cmd]}`); //, data\n        console.log(\"ctaphid THE ERROR:\", error);\n        throw error;\n        return Promise.resolve();  // error;\n    }\n\n}\n\n\n", "// Copyright 2022 Nitrokey GmbH\n\nimport { errcode_to_string} from \"./constants\";\n\nexport class CommandExecutionError extends Error {\n    public errcode : number = 0;\n    public name : string = '';\n    constructor(m: string, errcode:number) {\n        super('CommandExecutionError - ' + m + ' - ' +errcode_to_string[errcode] +  ' ' + errcode.toString() + ' ' + 'hex: 0x'+errcode.toString(16));\n\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, CommandExecutionError.prototype);\n        this.errcode = errcode;\n        this.name = errcode_to_string[errcode];\n    }\n}\n", "// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\nexport const library_initialization_time_ms = Date.now();\n\nexport function log_message_library(s: string, ...args: any[]) {\n    s = prefix_with_timestamp(s, '*WC');\n    args = [s].concat(args);\n    // @ts-ignore\n    console.log.apply(console, args);\n}\n\nexport function log_message(s: string) {\n    s = prefix_with_timestamp(s);\n    console.log(s);\n    let logs = document.getElementById(\"console\");\n    if (logs) {\n        logs.innerHTML = logs.innerHTML + s + '\\r\\n';\n        logs.scrollTop = logs.scrollHeight;\n    }\n}\n\nfunction prefix_with_timestamp(s: string, prefix = '*') {\n    const time = ((Date.now() - library_initialization_time_ms) / 1000).toFixed(1);\n    s = `${prefix} [${time}] ` + s;\n    return s;\n}\n\nexport async function log_fn(statusText: string): Promise<void> {\n    log_function_library(statusText);\n}\n\n// let log_function_library = (message: string) => console.log(message);\nlet log_function_library = (message: string) => log_message(message);\n\nexport function set_log_webcrypt(func: any){\n    log_function_library = func;\n}\n", "// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\nimport {log_message_library} from \"./logs\";\n\nexport class Session {\n    private validPeriod: number = 60000; //const\n    private TP: string = '';\n    private validUntil: number = 0;\n\n    constructor() {\n        this.TP = '';\n    }\n    public clear() {\n        this.TP = '';\n    }\n\n    public get token(): string {\n        return this.TP;\n    }\n\n    private getSecondsEpoch() {\n        return new Date().getTime()/1000;\n    }\n\n    public set token(token: string) {\n        log_message_library(`Auth token set: '${token.slice(0,4).toString()}'`);\n        this.TP = token;\n        this.validUntil = this.getSecondsEpoch() + this.validPeriod;\n    }\n\n    public timeLeft():number{\n        if (!this.valid())\n            return 0;\n        return this.validUntil - this.getSecondsEpoch();\n    }\n\n    public valid():boolean {\n        return this.getSecondsEpoch() < this.validUntil && this.TP !== undefined && this.TP.length !== 0;\n    }\n\n    public authorize(data: any) {\n        log_message_library(`Auth token '${this.TP.slice(0,4).toString()}' valid for the next ${this.timeLeft().toFixed(1)} seconds`);\n        if (!this.valid()) {\n            if (this.validUntil !== 0) console.warn('Temporary authorization token is not valid anymore. Clearing state.');\n            this.clear();\n        }\n        if (!data){\n            data = {};\n        }\n\n        // data['TP'] = this.TP;\n        data['TP'] = new Uint8Array(4);\n        return data;\n    }\n\n}\n", "// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\nexport class WCKeyDetails {\n    public pubkey: string;\n    public keyhandle: string;\n\n    constructor(pk: string, kh: string) {\n        this.keyhandle = kh;\n        this.pubkey = pk;\n    }\n\n}\n\nexport interface Dictionary {\n    [key: string]: number|Uint8Array|string|object\n}\n\nexport type StatusCallback = (statusText: string) => Promise<void>;\nexport type ProgressCallback = (x: number, max:number) => Promise<void>;\n", "// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\n// AUTOGENERATED'\nimport {StatusCallback} from \"./types\";\nimport {send_command} from \"./transport\";\nimport {WEBCRYPT_CMD} from \"./constants\";\nimport {Session} from \"./session\";\nconst session = new Session();\n\nexport type WebcryptData = string;\n\n\n// CommandStatusParams\nexport class CommandStatusReturn {\n    public UNLOCKED: boolean;\n    public VERSION: WebcryptData;\n    public SLOTS: WebcryptData;\n    public PIN_ATTEMPTS: WebcryptData;\n    constructor(UNLOCKED: boolean, VERSION: WebcryptData, SLOTS: WebcryptData, PIN_ATTEMPTS: WebcryptData) {\n        this.UNLOCKED = UNLOCKED;\n        this.VERSION = VERSION;\n        this.SLOTS = SLOTS;\n        this.PIN_ATTEMPTS = PIN_ATTEMPTS;\n    }\n}\nexport async function Webcrypt_Status(statusCallback: StatusCallback): Promise<CommandStatusReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.STATUS, {}, statusCallback);\n    return new CommandStatusReturn(res[\"UNLOCKED\"], res[\"VERSION\"], res[\"SLOTS\"], res[\"PIN_ATTEMPTS\"]);\n}\nexport class CommandTestPingParams {\n    public WebcryptData: WebcryptData;\n    constructor(WebcryptData: WebcryptData) {\n        this.WebcryptData = WebcryptData;\n    }\n}\nexport class CommandTestPingReturn {\n    public WebcryptData: WebcryptData;\n    constructor(WebcryptData: WebcryptData) {\n        this.WebcryptData = WebcryptData;\n    }\n}\nexport async function Webcrypt_TestPing(statusCallback: StatusCallback, data: CommandTestPingParams): Promise<CommandTestPingReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.TEST_PING, data, statusCallback);\n    return new CommandTestPingReturn(res[\"WebcryptData\"]);\n}\n// CommandTestClearParams\n// CommandTestClearReturn\nexport async function Webcrypt_TestClear(statusCallback: StatusCallback): Promise<void>{\n    const res = await send_command(session, WEBCRYPT_CMD.TEST_CLEAR, {}, statusCallback);\n}\n// CommandTestRebootParams\n// CommandTestRebootReturn\nexport async function Webcrypt_TestReboot(statusCallback: StatusCallback): Promise<void>{\n    const res = await send_command(session, WEBCRYPT_CMD.TEST_REBOOT, {}, statusCallback);\n}\nexport class CommandLoginParams {\n    public PIN: WebcryptData;\n    constructor(PIN: WebcryptData) {\n        this.PIN = PIN;\n    }\n}\nexport class CommandLoginReturn {\n    public TP: WebcryptData;\n    constructor(TP: WebcryptData) {\n        this.TP = TP;\n    }\n}\nexport async function Webcrypt_Login(statusCallback: StatusCallback, data: CommandLoginParams): Promise<CommandLoginReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.LOGIN, data, statusCallback);\n    return new CommandLoginReturn(res[\"TP\"]);\n}\n// CommandLogoutParams\n// CommandLogoutReturn\nexport async function Webcrypt_Logout(statusCallback: StatusCallback): Promise<void>{\n    const res = await send_command(session, WEBCRYPT_CMD.LOGOUT, {}, statusCallback);\n}\n// CommandFactoryResetParams\n// CommandFactoryResetReturn\nexport async function Webcrypt_FactoryReset(statusCallback: StatusCallback): Promise<void>{\n    const res = await send_command(session, WEBCRYPT_CMD.FACTORY_RESET, {}, statusCallback);\n}\nexport class CommandSetConfigurationParams {\n    public CONFIRMATION: WebcryptData;\n    constructor(CONFIRMATION: WebcryptData) {\n        this.CONFIRMATION = CONFIRMATION;\n    }\n}\n// CommandSetConfigurationReturn\nexport async function Webcrypt_SetConfiguration(statusCallback: StatusCallback, data: CommandSetConfigurationParams): Promise<void>{\n    const res = await send_command(session, WEBCRYPT_CMD.SET_CONFIGURATION, data, statusCallback);\n}\n// CommandGetConfigurationParams\nexport class CommandGetConfigurationReturn {\n    public CONFIRMATION: WebcryptData;\n    constructor(CONFIRMATION: WebcryptData) {\n        this.CONFIRMATION = CONFIRMATION;\n    }\n}\nexport async function Webcrypt_GetConfiguration(statusCallback: StatusCallback): Promise<CommandGetConfigurationReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.GET_CONFIGURATION, {}, statusCallback);\n    return new CommandGetConfigurationReturn(res[\"CONFIRMATION\"]);\n}\nexport class CommandSetPinParams {\n    public PIN: WebcryptData;\n    constructor(PIN: WebcryptData) {\n        this.PIN = PIN;\n    }\n}\n// CommandSetPinReturn\nexport async function Webcrypt_SetPin(statusCallback: StatusCallback, data: CommandSetPinParams): Promise<void>{\n    const res = await send_command(session, WEBCRYPT_CMD.SET_PIN, data, statusCallback);\n}\nexport class CommandChangePinParams {\n    public PIN: WebcryptData;\n    public NEWPIN: WebcryptData;\n    constructor(PIN: WebcryptData, NEWPIN: WebcryptData) {\n        this.PIN = PIN;\n        this.NEWPIN = NEWPIN;\n    }\n}\n// CommandChangePinReturn\nexport async function Webcrypt_ChangePin(statusCallback: StatusCallback, data: CommandChangePinParams): Promise<void>{\n    const res = await send_command(session, WEBCRYPT_CMD.CHANGE_PIN, data, statusCallback);\n}\nexport class CommandInitializeSeedParams {\n    public ENTROPY: WebcryptData;\n    constructor(ENTROPY: WebcryptData) {\n        this.ENTROPY = ENTROPY;\n    }\n}\nexport class CommandInitializeSeedReturn {\n    public MASTER: WebcryptData;\n    public SALT: WebcryptData;\n    constructor(MASTER: WebcryptData, SALT: WebcryptData) {\n        this.MASTER = MASTER;\n        this.SALT = SALT;\n    }\n}\nexport async function Webcrypt_InitializeSeed(statusCallback: StatusCallback, data: CommandInitializeSeedParams): Promise<CommandInitializeSeedReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.INITIALIZE_SEED, data, statusCallback);\n    return new CommandInitializeSeedReturn(res[\"MASTER\"], res[\"SALT\"]);\n}\nexport class CommandRestoreFromSeedParams {\n    public MASTER: WebcryptData;\n    public SALT: WebcryptData;\n    constructor(MASTER: WebcryptData, SALT: WebcryptData) {\n        this.MASTER = MASTER;\n        this.SALT = SALT;\n    }\n}\nexport class CommandRestoreFromSeedReturn {\n    public HASH: WebcryptData;\n    constructor(HASH: WebcryptData) {\n        this.HASH = HASH;\n    }\n}\nexport async function Webcrypt_RestoreFromSeed(statusCallback: StatusCallback, data: CommandRestoreFromSeedParams): Promise<CommandRestoreFromSeedReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.RESTORE_FROM_SEED, data, statusCallback);\n    return new CommandRestoreFromSeedReturn(res[\"HASH\"]);\n}\n// CommandGenerateKeyParams\nexport class CommandGenerateKeyReturn {\n    public PUBKEY: WebcryptData;\n    public KEYHANDLE: WebcryptData;\n    constructor(PUBKEY: WebcryptData, KEYHANDLE: WebcryptData) {\n        this.PUBKEY = PUBKEY;\n        this.KEYHANDLE = KEYHANDLE;\n    }\n}\nexport async function Webcrypt_GenerateKey(statusCallback: StatusCallback): Promise<CommandGenerateKeyReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.GENERATE_KEY, {}, statusCallback);\n    return new CommandGenerateKeyReturn(res[\"PUBKEY\"], res[\"KEYHANDLE\"]);\n}\nexport class CommandSignParams {\n    public HASH: WebcryptData;\n    public KEYHANDLE: WebcryptData;\n    constructor(HASH: WebcryptData, KEYHANDLE: WebcryptData) {\n        this.HASH = HASH;\n        this.KEYHANDLE = KEYHANDLE;\n    }\n}\nexport class CommandSignReturn {\n    public SIGNATURE: WebcryptData;\n    public INHASH: WebcryptData;\n    constructor(SIGNATURE: WebcryptData, INHASH: WebcryptData) {\n        this.SIGNATURE = SIGNATURE;\n        this.INHASH = INHASH;\n    }\n}\nexport async function Webcrypt_Sign(statusCallback: StatusCallback, data: CommandSignParams): Promise<CommandSignReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.SIGN, data, statusCallback);\n    return new CommandSignReturn(res[\"SIGNATURE\"], res[\"INHASH\"]);\n}\nexport class CommandDecryptParams {\n    public DATA: WebcryptData;\n    public KEYHANDLE: WebcryptData;\n    public HMAC: WebcryptData;\n    public ECCEKEY: WebcryptData;\n    constructor(DATA: WebcryptData, KEYHANDLE: WebcryptData, HMAC: WebcryptData, ECCEKEY: WebcryptData) {\n        this.DATA = DATA;\n        this.KEYHANDLE = KEYHANDLE;\n        this.HMAC = HMAC;\n        this.ECCEKEY = ECCEKEY;\n    }\n}\nexport class CommandDecryptReturn {\n    public DATA: WebcryptData;\n    constructor(DATA: WebcryptData) {\n        this.DATA = DATA;\n    }\n}\nexport async function Webcrypt_Decrypt(statusCallback: StatusCallback, data: CommandDecryptParams): Promise<CommandDecryptReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.DECRYPT, data, statusCallback);\n    return new CommandDecryptReturn(res[\"DATA\"]);\n}\nexport class CommandGenerateKeyFromDataParams {\n    public HASH: WebcryptData;\n    constructor(HASH: WebcryptData) {\n        this.HASH = HASH;\n    }\n}\nexport class CommandGenerateKeyFromDataReturn {\n    public PUBKEY: WebcryptData;\n    public KEYHANDLE: WebcryptData;\n    constructor(PUBKEY: WebcryptData, KEYHANDLE: WebcryptData) {\n        this.PUBKEY = PUBKEY;\n        this.KEYHANDLE = KEYHANDLE;\n    }\n}\nexport async function Webcrypt_GenerateKeyFromData(statusCallback: StatusCallback, data: CommandGenerateKeyFromDataParams): Promise<CommandGenerateKeyFromDataReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.GENERATE_KEY_FROM_DATA, data, statusCallback);\n    return new CommandGenerateKeyFromDataReturn(res[\"PUBKEY\"], res[\"KEYHANDLE\"]);\n}\n// CommandGenerateResidentKeyParams\nexport class CommandGenerateResidentKeyReturn {\n    public PUBKEY: WebcryptData;\n    public KEYHANDLE: WebcryptData;\n    constructor(PUBKEY: WebcryptData, KEYHANDLE: WebcryptData) {\n        this.PUBKEY = PUBKEY;\n        this.KEYHANDLE = KEYHANDLE;\n    }\n}\nexport async function Webcrypt_GenerateResidentKey(statusCallback: StatusCallback): Promise<CommandGenerateResidentKeyReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.GENERATE_RESIDENT_KEY, {}, statusCallback);\n    return new CommandGenerateResidentKeyReturn(res[\"PUBKEY\"], res[\"KEYHANDLE\"]);\n}\nexport class CommandReadResidentKeyPublicParams {\n    public KEYHANDLE: WebcryptData;\n    constructor(KEYHANDLE: WebcryptData) {\n        this.KEYHANDLE = KEYHANDLE;\n    }\n}\nexport class CommandReadResidentKeyPublicReturn {\n    public PUBKEY: WebcryptData;\n    public KEYHANDLE: WebcryptData;\n    constructor(PUBKEY: WebcryptData, KEYHANDLE: WebcryptData) {\n        this.PUBKEY = PUBKEY;\n        this.KEYHANDLE = KEYHANDLE;\n    }\n}\nexport async function Webcrypt_ReadResidentKeyPublic(statusCallback: StatusCallback, data: CommandReadResidentKeyPublicParams): Promise<CommandReadResidentKeyPublicReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.READ_RESIDENT_KEY_PUBLIC, data, statusCallback);\n    return new CommandReadResidentKeyPublicReturn(res[\"PUBKEY\"], res[\"KEYHANDLE\"]);\n}\n// CommandDiscoverResidentKeysParams\n// CommandDiscoverResidentKeysReturn\nexport async function Webcrypt_DiscoverResidentKeys(statusCallback: StatusCallback): Promise<void>{\n    const res = await send_command(session, WEBCRYPT_CMD.DISCOVER_RESIDENT_KEYS, {}, statusCallback);\n}\nexport class CommandWriteResidentKeyParams {\n    public RAW_KEY_DATA: WebcryptData;\n    constructor(RAW_KEY_DATA: WebcryptData) {\n        this.RAW_KEY_DATA = RAW_KEY_DATA;\n    }\n}\nexport class CommandWriteResidentKeyReturn {\n    public PUBKEY: WebcryptData;\n    public KEYHANDLE: WebcryptData;\n    constructor(PUBKEY: WebcryptData, KEYHANDLE: WebcryptData) {\n        this.PUBKEY = PUBKEY;\n        this.KEYHANDLE = KEYHANDLE;\n    }\n}\nexport async function Webcrypt_WriteResidentKey(statusCallback: StatusCallback, data: CommandWriteResidentKeyParams): Promise<CommandWriteResidentKeyReturn>{\n    const res = await send_command(session, WEBCRYPT_CMD.WRITE_RESIDENT_KEY, data, statusCallback);\n    return new CommandWriteResidentKeyReturn(res[\"PUBKEY\"], res[\"KEYHANDLE\"]);\n}\n\n", "// Copyright 2022 Nitrokey GmbH\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\n\nimport {send_command} from \"./transport\";\nimport {string_to_errcode, VERBOSE, WEBCRYPT_CMD} from \"./constants\";\nimport {CommandExecutionError} from \"./exceptions\";\nimport {\n    agree_on_key,\n    buffer_to_uint8,\n    byteToHexString,\n    calculate_hmac,\n    concat,\n    delay,\n    ecdsa_to_ecdh,\n    encode_text,\n    encrypt_aes,\n    export_key,\n    flatten,\n    generate_key_ecc,\n    hexStringToByte,\n    import_key,\n    number_to_short,\n    pkcs7_pad_16\n} from \"./helpers\";\nimport {Session} from \"./session\";\nimport {log_fn} from \"./logs\";\nimport {Dictionary, StatusCallback, WCKeyDetails} from \"./types\";\nimport {CommandDecryptParams, WebcryptData} from \"./commands\";\n\nexport * from \"./commands\";\nexport {hexStringToByte, byteToHexString};\n\nconst session = new Session();\n\n/**\n * @deprecated\n */\nexport async function WEBCRYPT_STATUS(statusCallback: StatusCallback): Promise<Dictionary> {\n    return await send_command(session, WEBCRYPT_CMD.STATUS, {}, statusCallback);\n}\n\n// TODO move to repeat_wrapper\n/**\n * @deprecated\n */\nexport async function WEBCRYPT_LOGIN(PIN: string, statusCallback: StatusCallback) {\n    const data = { 'PIN': PIN };\n    let result: any = {};\n    let err: any = 0;\n    const total_attempts = 5;\n    for (let i = 0; i < total_attempts; i++) {\n        try {\n            if (VERBOSE) console.log('Please press the touch button to continue');\n            await log_fn(`Login attempt: ${i+1}/${total_attempts}`);\n            result = await send_command(session, WEBCRYPT_CMD.LOGIN, data, statusCallback);\n            err = 0;\n            break;\n        } catch (error) {\n\n            if (error instanceof CommandExecutionError && i < total_attempts-1) {\n                // error: CommandExecutionError;\n                if (error.errcode !== string_to_errcode['ERR_USER_NOT_PRESENT']) {\n                    await log_fn(`Error encountered: ${error.name}`);\n                    throw error;\n                }\n                if (VERBOSE) console.log('error', error);\n                err = error;\n                await delay(1000);\n                await log_fn('User touch not registered. Trying to log in one more time.');\n            } else {\n                throw error;\n            }\n\n        }\n    }\n    if (err) {\n        await log_fn('User touch not registered. Throwing exception.');\n        throw err;\n    }\n    session.token = result['TP'];\n    await log_fn('User touch registered. Logged in.');\n}\n\n\n/**\n * @deprecated\n */\nexport async function WEBCRYPT_GENERATE_FROM_DATA(statusCallback: StatusCallback, data: Uint8Array): Promise<WCKeyDetails> {\n    const data_to_send = {'HASH': data};\n    try {\n        const res = await send_command(session, WEBCRYPT_CMD.GENERATE_KEY_FROM_DATA, data_to_send, statusCallback);\n        const pk: string = res[\"PUBKEY\"];\n        return new WCKeyDetails(pk, res[\"KEYHANDLE\"]);\n    } catch (e) {\n        console.log(e);\n    }\n    return new WCKeyDetails(\"\", \"\");\n}\n\n/**\n * @deprecated\n */\nexport async function WEBCRYPT_GENERATE(statusCallback: StatusCallback): Promise<WCKeyDetails> {\n    const res = await send_command(session, WEBCRYPT_CMD.GENERATE_KEY, null, statusCallback);\n    const pk: string = res[\"PUBKEY\"];\n    return new WCKeyDetails(pk, res[\"KEYHANDLE\"]);\n}\n\n/**\n * @deprecated\n */\nexport async function WEBCRYPT_SIGN(statusCallback: StatusCallback, hash: Uint8Array, key_handle: Uint8Array): Promise<string> {\n    const data_to_send = {'HASH': hash, 'KEYHANDLE': key_handle};\n    const res = await send_command(session, WEBCRYPT_CMD.SIGN, data_to_send, statusCallback);\n    return res[\"SIGNATURE\"];\n}\n\nexport async function WEBCRYPT_ENCRYPT(statusCallback: StatusCallback, data_to_encrypt: string, pubkey_hex: string, keyhandle_hex: string): Promise<CommandDecryptParams> {\n    // 1. Generate ECC key\n    // 2. Agree on a shared secret with the keyhandle's public key\n    // 3. Encrypt data with the shared secret AES-256\n    // 4. Calculate HMAC\n    // 5. Pack it or provide in separate fields.\n\n    // TODO accept uint8array type for encryption as well\n    const plaintext = await encode_text(data_to_encrypt);\n    const plaintext_with_len = flatten([buffer_to_uint8(await number_to_short(plaintext.length)), plaintext]);\n    const plaintext_pad = pkcs7_pad_16(plaintext_with_len);\n    const pubkey_raw = hexStringToByte(pubkey_hex);\n    const pubkey = await import_key(pubkey_raw); // TODO import directly as ECDH, without usages\n    const pubkey_ecdh = await ecdsa_to_ecdh(pubkey);\n    const keyhandle = hexStringToByte(keyhandle_hex);\n    const ephereal_keypair = await generate_key_ecc();\n    const ephereal_pubkey = ephereal_keypair.publicKey;\n    const ephereal_pubkey_raw = await export_key(ephereal_pubkey);\n    const aes_key = await agree_on_key(ephereal_keypair.privateKey, pubkey_ecdh);\n    const ciphertext = await encrypt_aes(aes_key, plaintext_pad);\n    const ciphertext_len = await number_to_short(ciphertext.byteLength);\n    // TODO: DESIGN derive different keys for hmac and encryption\n    const data_to_hmac = flatten([buffer_to_uint8(ciphertext), ephereal_pubkey_raw,\n        buffer_to_uint8(ciphertext_len), keyhandle]);\n    const hmac = await calculate_hmac(aes_key, data_to_hmac);\n\n    return new CommandDecryptParams(\n        byteToHexString(buffer_to_uint8(ciphertext)),\n        byteToHexString(keyhandle),\n        byteToHexString(buffer_to_uint8(hmac)),\n        byteToHexString(ephereal_pubkey_raw)\n    );\n}\n\nexport async function WEBCRYPT_VERIFY(statusCallback: StatusCallback, pubkey_hex: string, signature_hex: string, hash_hex: string): Promise<boolean> {\n    const algorithm = {\n        name: \"ECDSA\",\n        hash: {name: \"SHA-256\"},\n        namedCurve: \"P-256\",\n    };\n    try {\n        const publicKey = await crypto.subtle.importKey(\n            'raw',\n            hexStringToByte(pubkey_hex),\n            algorithm,\n            true,\n            [\"verify\"]\n        );\n\n        const signature = hexStringToByte(signature_hex);\n        const encoded = hexStringToByte(hash_hex);\n\n        const verify_res: boolean = await window.crypto.subtle.verify(\n            algorithm,\n            publicKey,\n            signature,\n            encoded\n        );\n        console.log('Verify result', { pubkey_hex, signature_hex, hash_hex, verify_res, publicKey });\n        return verify_res;\n    } catch (e) {\n        console.log('fail', e);\n        return false;\n    }\n}\n\n\n// export async function WEBCRYPT_OPENPGP_DECRYPT(statusCallback: StatusCallback, eccekey: Uint8Array, key_handle: Uint8Array, fingerprint: Uint8Array): Promise<string> {\nexport async function WEBCRYPT_OPENPGP_DECRYPT(statusCallback: StatusCallback, eccekey: Uint8Array): Promise<Uint8Array> {\n    // const data_to_send = {'ECCEKEY': eccekey, 'KEYHANDLE': key_handle};\n    const data_to_send = {'ECCEKEY': eccekey};\n    const res = await send_command(session, WEBCRYPT_CMD.OPENPGP_DECRYPT, data_to_send, statusCallback);\n    return hexStringToByte(res[\"DATA\"]);\n}\n\nexport async function WEBCRYPT_OPENPGP_SIGN(statusCallback: StatusCallback, data: Uint8Array): Promise<string> {\n    const data_to_send = {'DATA': data };\n    const res = await send_command(session, WEBCRYPT_CMD.OPENPGP_SIGN, data_to_send, statusCallback);\n    return res[\"SIGNATURE\"];\n}\n\nexport async function WEBCRYPT_OPENPGP_INFO(statusCallback: StatusCallback): Promise<{ date: number; sign_pubkey: Uint8Array; encr_pubkey: Uint8Array }> {\n    const res = await send_command(session, WEBCRYPT_CMD.OPENPGP_INFO, {}, statusCallback);\n    const sign_pubkey = concat( new Uint8Array([0x04]), hexStringToByte(res[\"SIGN_PUBKEY\"]) );\n    const encr_pubkey = concat( new Uint8Array([0x04]), hexStringToByte(res[\"ENCR_PUBKEY\"]) );\n    const dateB = hexStringToByte(res[\"DATE\"]);\n    const dateS = new TextDecoder().decode(dateB);\n    const date = Number(dateS);\n    console.log({encr_pubkey, sign_pubkey, date, name:'webcrypt openpgp info result'});\n    return {encr_pubkey, sign_pubkey, date}; // TODO return all keys\n}\n\n\nexport async function WEBCRYPT_OPENPGP_IMPORT(statusCallback: StatusCallback, { encr_privkey  = null, sign_privkey  = null,\n    auth_privkey  = null, date= new Date(), ...rest } ) : Promise<void> {\n    // TODO design - allow for partial import?\n    const data = {\n        \"ENCR_PRIVKEY\": encr_privkey? byteToHexString(encr_privkey) : \"\",\n        \"SIGN_PRIVKEY\": sign_privkey? byteToHexString(sign_privkey) : \"\",\n        \"AUTH_PRIVKEY\": auth_privkey? byteToHexString(auth_privkey) : sign_privkey? byteToHexString(sign_privkey): \"\", // TODO FIXME\n        \"DATE\": byteToHexString(new TextEncoder().encode(date.getTime().toString())),\n    };\n    await send_command(session, WEBCRYPT_CMD.OPENPGP_IMPORT, data, statusCallback);\n}\n\n\nexport async function WEBCRYPT_OPENPGP_GENERATE(statusCallback: StatusCallback): Promise<void> {\n    await send_command(session, WEBCRYPT_CMD.OPENPGP_GENERATE, {}, statusCallback);\n}\n"],
  "mappings": "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",
  "names": ["undefined", "encode", "i", "value", "dataView", "decode", "WebcryptData", "session"]
}
